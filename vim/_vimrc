source $VIMRUNTIME/vimrc_example.vim

" 检测文件的类型
filetype on
" 语法高亮度显示
syntax on

" 显示行号
set number
" 下面两行在进行编写代码时，在格式对起上很有用；
" 第一行，vim使用自动对齐，也就是把当前行的对齐格式应用到下一行
" 第二行，依据上面的对齐格式，智能的选择对起方式，对于类似C语言
set autoindent
set smartindent
" 第一行设置tab键为4个空格，第二行设置当行之间交错时使用4个空格
set tabstop=4
set expandtab
set shiftwidth=4
" 设置匹配模式，当输入一个左括号时会匹配相应的那个右括号
set showmatch
" 在编辑过程中，在右下角显示光标位置的状态行
set ruler
" 显示tab和行尾
" set list

set cursorline

set backupext=.bak
set backupdir=C:/vim_backup
set noundofile

" 解决文件内内容显示乱码
set encoding=utf-8
set fileencodings=utf-8,gbk,gb18030,gk2312
" 解决菜单乱码
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim
" 解决consle输出乱码
language messages zh_CN.utf-8

set diffexpr=MyDiff()
function MyDiff()
  let opt = '-a --binary '
  if &diffopt =~ 'icase' | let opt = opt . '-i ' | endif
  if &diffopt =~ 'iwhite' | let opt = opt . '-b ' | endif
  let arg1 = v:fname_in
  if arg1 =~ ' ' | let arg1 = '"' . arg1 . '"' | endif
  let arg1 = substitute(arg1, '!', '\!', 'g')
  let arg2 = v:fname_new
  if arg2 =~ ' ' | let arg2 = '"' . arg2 . '"' | endif
  let arg2 = substitute(arg2, '!', '\!', 'g')
  let arg3 = v:fname_out
  if arg3 =~ ' ' | let arg3 = '"' . arg3 . '"' | endif
  let arg3 = substitute(arg3, '!', '\!', 'g')
  if $VIMRUNTIME =~ ' '
    if &sh =~ '\<cmd'
      if empty(&shellxquote)
        let l:shxq_sav = ''
        set shellxquote&
      endif
      let cmd = '"' . $VIMRUNTIME . '\diff"'
    else
      let cmd = substitute($VIMRUNTIME, ' ', '" ', '') . '\diff"'
    endif
  else
    let cmd = $VIMRUNTIME . '\diff'
  endif
  let cmd = substitute(cmd, '!', '\!', 'g')
  silent execute '!' . cmd . ' ' . opt . arg1 . ' ' . arg2 . ' > ' . arg3
  if exists('l:shxq_sav')
    let &shellxquote=l:shxq_sav
  endif
endfunction

